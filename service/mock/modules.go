// Code generated by MockGen. DO NOT EDIT.
// Source: modules.go
//
// Generated by this command:
//
//	mockgen -source modules.go -package mock -destination mock/modules.go Modules
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	service "github.com/jakobmoellerdev/octi-sync-server/service"
	gomock "go.uber.org/mock/gomock"
)

// MockModules is a mock of Modules interface.
type MockModules struct {
	ctrl     *gomock.Controller
	recorder *MockModulesMockRecorder
}

// MockModulesMockRecorder is the mock recorder for MockModules.
type MockModulesMockRecorder struct {
	mock *MockModules
}

// NewMockModules creates a new mock instance.
func NewMockModules(ctrl *gomock.Controller) *MockModules {
	mock := &MockModules{ctrl: ctrl}
	mock.recorder = &MockModulesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModules) EXPECT() *MockModulesMockRecorder {
	return m.recorder
}

// DeleteByPattern mocks base method.
func (m *MockModules) DeleteByPattern(ctx context.Context, pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByPattern", ctx, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByPattern indicates an expected call of DeleteByPattern.
func (mr *MockModulesMockRecorder) DeleteByPattern(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByPattern", reflect.TypeOf((*MockModules)(nil).DeleteByPattern), ctx, pattern)
}

// Get mocks base method.
func (m *MockModules) Get(ctx context.Context, name string) (service.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(service.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockModulesMockRecorder) Get(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockModules)(nil).Get), ctx, name)
}

// HealthCheck mocks base method.
func (m *MockModules) HealthCheck() service.HealthCheck {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(service.HealthCheck)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockModulesMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockModules)(nil).HealthCheck))
}

// Set mocks base method.
func (m *MockModules) Set(ctx context.Context, name string, module service.Module) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, name, module)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockModulesMockRecorder) Set(ctx, name, module any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockModules)(nil).Set), ctx, name, module)
}
