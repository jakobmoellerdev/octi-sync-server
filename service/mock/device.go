// Code generated by MockGen. DO NOT EDIT.
// Source: device.go
//
// Generated by this command:
//
//	mockgen -source device.go -package mock -destination mock/device.go Device
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	service "github.com/jakobmoellerdev/octi-sync-server/service"
	gomock "go.uber.org/mock/gomock"
)

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// HashedPass mocks base method.
func (m *MockDevice) HashedPass() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashedPass")
	ret0, _ := ret[0].(string)
	return ret0
}

// HashedPass indicates an expected call of HashedPass.
func (mr *MockDeviceMockRecorder) HashedPass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashedPass", reflect.TypeOf((*MockDevice)(nil).HashedPass))
}

// ID mocks base method.
func (m *MockDevice) ID() service.DeviceID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(service.DeviceID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockDeviceMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDevice)(nil).ID))
}

// Verify mocks base method.
func (m *MockDevice) Verify(password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockDeviceMockRecorder) Verify(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockDevice)(nil).Verify), password)
}
